import html2canvas from 'html2canvas';

interface CaptureScreenshotParams {
  destination: string;
  startDate: Date | null;
  endDate: Date | null;
}

export const captureScreenshot = async ({
  destination,
  startDate,
  endDate
}: CaptureScreenshotParams): Promise<void> => {
  return new Promise((resolve, reject) => {
    try {
      // Find the export view element (clean template for screenshots)
      let exportElement = document.getElementById('export-view');
      
      if (!exportElement) {
        // Fallback to regular results if export view not found
        exportElement = document.getElementById('results');
      }
      
      if (!exportElement) {
        reject(new Error('Export element not found'));
        return;
      }

      // Show the export view temporarily
      if (exportElement.id === 'export-view') {
        exportElement.style.display = 'block';
      }

      // Create a temporary container for the screenshot
      const tempContainer = document.createElement('div');
      tempContainer.style.position = 'absolute';
      tempContainer.style.left = '-9999px';
      tempContainer.style.top = '0';
      tempContainer.style.width = '800px';
      tempContainer.style.backgroundColor = 'white';
      tempContainer.style.padding = '40px';
      tempContainer.style.borderRadius = '16px';
      tempContainer.style.boxShadow = '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)';
      tempContainer.style.fontFamily = 'system-ui, -apple-system, sans-serif';
      
      // Clone the export element content
      const clonedContent = exportElement.cloneNode(true) as HTMLElement;
      
      // Remove any interactive elements that shouldn't be in the screenshot
      const buttonsToRemove = clonedContent.querySelectorAll('button, input, select');
      buttonsToRemove.forEach(button => button.remove());
      
      // Add overlay with trip details
      const overlay = document.createElement('div');
      overlay.style.position = 'absolute';
      overlay.style.top = '20px';
      overlay.style.right = '20px';
      overlay.style.background = 'linear-gradient(135deg, #667eea 0%, #764ba2 100%)';
      overlay.style.color = 'white';
      overlay.style.padding = '12px 16px';
      overlay.style.borderRadius = '8px';
      overlay.style.fontSize = '14px';
      overlay.style.fontWeight = '600';
      overlay.style.zIndex = '10';
      overlay.style.boxShadow = '0 4px 6px -1px rgba(0, 0, 0, 0.1)';
      
      let overlayText = `üìç ${destination}`;
      if (startDate && endDate) {
        const startStr = startDate.toLocaleDateString('en-US', { 
          month: 'short', 
          day: 'numeric' 
        });
        const endStr = endDate.toLocaleDateString('en-US', { 
          month: 'short', 
          day: 'numeric' 
        });
        overlayText += `\nüìÖ ${startStr} - ${endStr}`;
      }
      
      overlay.innerHTML = overlayText.replace(/\n/g, '<br>');
      
      // Add watermark
      const watermark = document.createElement('div');
      watermark.style.position = 'absolute';
      watermark.style.bottom = '20px';
      watermark.style.left = '20px';
      watermark.style.color = '#6b7280';
      watermark.style.fontSize = '12px';
      watermark.style.fontWeight = '500';
      watermark.textContent = 'Generated by PackWise ‚úàÔ∏è';
      
      // Add elements to temp container
      tempContainer.appendChild(clonedContent);
      tempContainer.appendChild(overlay);
      tempContainer.appendChild(watermark);
      
      // Add to document temporarily
      document.body.appendChild(tempContainer);
      
      // Configure html2canvas options
      const options = {
        backgroundColor: '#ffffff',
        scale: 2, // Higher quality
        useCORS: true,
        allowTaint: true,
        width: 800,
        height: tempContainer.scrollHeight,
        scrollX: 0,
        scrollY: 0,
        windowWidth: 800,
        windowHeight: tempContainer.scrollHeight,
        logging: false,
        onclone: (clonedDoc: Document) => {
          // Ensure the cloned document has the same styles
          const clonedElement = clonedDoc.getElementById('export-view') || clonedDoc.getElementById('results');
          if (clonedElement) {
            clonedElement.style.transform = 'none';
            clonedElement.style.animation = 'none';
          }
        }
      };
      
      // Capture the screenshot
      html2canvas(tempContainer, options).then((canvas) => {
        // Hide the export view again
        if (exportElement.id === 'export-view') {
          exportElement.style.display = 'none';
        }
        
        // Remove the temporary container
        document.body.removeChild(tempContainer);
        
        // Convert canvas to blob and download
        canvas.toBlob((blob) => {
          if (blob) {
            const url = URL.createObjectURL(blob);
            const link = document.createElement('a');
            link.href = url;
            
            // Generate filename
            const safeDestination = destination.replace(/[^a-zA-Z0-9]/g, '_');
            const dateStr = new Date().toISOString().split('T')[0];
            link.download = `packing-list-${safeDestination}-${dateStr}.png`;
            
            // Trigger download
            document.body.appendChild(link);
            link.click();
            document.body.removeChild(link);
            
            // Clean up
            URL.revokeObjectURL(url);
            resolve();
          } else {
            reject(new Error('Failed to generate image blob'));
          }
        }, 'image/png', 0.9);
      }).catch((error) => {
        // Hide the export view on error
        if (exportElement.id === 'export-view') {
          exportElement.style.display = 'none';
        }
        
        // Clean up on error
        if (document.body.contains(tempContainer)) {
          document.body.removeChild(tempContainer);
        }
        reject(error);
      });
      
    } catch (error) {
      reject(error);
    }
  });
}; 