import jsPDF from 'jspdf';
import { PackingItem, WeatherData } from '@/store/usePackStore';

interface GeneratePDFParams {
  packingList: PackingItem[];
  destination: string;
  startDate: Date | null;
  endDate: Date | null;
  isLightPack: boolean;
  weatherData: WeatherData | null;
}

export const generatePDF = async ({
  packingList,
  destination,
  startDate,
  endDate,
  isLightPack,
  weatherData
}: GeneratePDFParams): Promise<void> => {
  return new Promise((resolve, reject) => {
    try {
      const doc = new jsPDF();
      const pageWidth = doc.internal.pageSize.getWidth();
      const margin = 20;
      const contentWidth = pageWidth - (margin * 2);
      let yPosition = margin;

      // Set proper font encoding and fallback
      doc.setFont('Helvetica', 'normal');
      doc.setFontSize(12);
      
      // Header
      doc.setFontSize(24);
      doc.setFont('Helvetica', 'bold');
      doc.text('PackWise - Smart Packing List', pageWidth / 2, yPosition, { align: 'center' });
      yPosition += 15;

      // Trip details
      doc.setFontSize(14);
      doc.setFont('Helvetica', 'bold');
      doc.text(`Destination: ${destination}`, margin, yPosition);
      yPosition += 10;

      if (startDate && endDate) {
        const startStr = startDate.toLocaleDateString('en-US', { 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric' 
        });
        const endStr = endDate.toLocaleDateString('en-US', { 
          year: 'numeric', 
          month: 'long', 
          day: 'numeric' 
        });
        doc.text(`Dates: ${startStr} - ${endStr}`, margin, yPosition);
        yPosition += 10;
      }

      doc.text(`Pack Mode: ${isLightPack ? 'Light Pack' : 'Full Pack'}`, margin, yPosition);
      yPosition += 15;

      // Weather summary
      if (weatherData) {
        doc.setFontSize(12);
        doc.setFont('Helvetica', 'bold');
        doc.text('Weather Forecast:', margin, yPosition);
        yPosition += 8;
        
        doc.setFont('Helvetica', 'normal');
        doc.setFontSize(10);
        // Clean the weather text to remove any HTML or special characters
        const weatherText = weatherData.summary.replace(/[^\w\s.,!?-]/g, '');
        const weatherLines = doc.splitTextToSize(weatherText, contentWidth);
        doc.text(weatherLines, margin, yPosition);
        yPosition += weatherLines.length * 5 + 10;
      }

      // Packing progress
      const packedCount = packingList.filter(item => item.isPacked).length;
      const totalCount = packingList.length;
      const progressPercentage = totalCount > 0 ? Math.round((packedCount / totalCount) * 100) : 0;
      
      doc.setFontSize(12);
      doc.setFont('Helvetica', 'bold');
      doc.text(`Packing Progress: ${packedCount}/${totalCount} items (${progressPercentage}%)`, margin, yPosition);
      yPosition += 15;

      // Group items by category
      const groupedItems = packingList.reduce((groups, item) => {
        const category = item.category;
        if (!groups[category]) {
          groups[category] = [];
        }
        groups[category].push(item);
        return groups;
      }, {} as { [key: string]: PackingItem[] });

      // Add items by category
      Object.keys(groupedItems).sort().forEach((category) => {
        const items = groupedItems[category];
        
        // Check if we need a new page
        if (yPosition > 250) {
          doc.addPage();
          yPosition = margin;
        }

        // Category header
        doc.setFontSize(14);
        doc.setFont('Helvetica', 'bold');
        doc.text(`${category} (${items.length})`, margin, yPosition);
        yPosition += 8;

        // Items in category
        doc.setFontSize(10);
        doc.setFont('Helvetica', 'normal');
        
        items.forEach((item) => {
          // Check if we need a new page
          if (yPosition > 270) {
            doc.addPage();
            yPosition = margin;
          }

          const quantity = isLightPack ? item.quantity.light : item.quantity.full;
          const checkbox = item.isPacked ? '☑' : '☐';
          // Clean the item name to remove any special characters that might cause corruption
          const cleanItemName = item.name.replace(/[^\w\s.,!?-]/g, '');
          const itemText = `${checkbox} ${cleanItemName}${quantity > 1 ? ` (${quantity})` : ''}`;
          
          // Add AI suggestion indicator
          const fullText = item.isAISuggestion ? `${itemText} [AI]` : itemText;
          
          doc.text(fullText, margin + 5, yPosition);
          yPosition += 6;
        });
        
        yPosition += 5; // Space between categories
      });

      // Footer
      doc.addPage();
      yPosition = margin;
      
      doc.setFontSize(12);
      doc.setFont('Helvetica', 'bold');
      doc.text('Generated by PackWise', pageWidth / 2, yPosition, { align: 'center' });
      yPosition += 8;
      
      doc.setFont('Helvetica', 'normal');
      doc.setFontSize(10);
      doc.text(`Generated on: ${new Date().toLocaleDateString('en-US', { 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      })}`, pageWidth / 2, yPosition, { align: 'center' });
      yPosition += 8;
      
      doc.text('Visit packwise.app for more smart packing features', pageWidth / 2, yPosition, { align: 'center' });

      // Generate filename
      const safeDestination = destination.replace(/[^a-zA-Z0-9]/g, '_');
      const dateStr = new Date().toISOString().split('T')[0];
      const filename = `packing-list-${safeDestination}-${dateStr}.pdf`;

      // Save the PDF
      doc.save(filename);
      resolve();
    } catch (error) {
      reject(error);
    }
  });
}; 