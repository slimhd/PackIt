import { NextRequest, NextResponse } from 'next/server';
import nodemailer from 'nodemailer';
import { PackingItem, WeatherData } from '@/store/usePackStore';

interface EmailRequest {
  email: string;
  destination: string;
  startDate: Date | null;
  endDate: Date | null;
  isLightPack: boolean;
  packingList: PackingItem[];
  weatherData: WeatherData | null;
}

// Create transporter (you'll need to configure this with your email service)
const createTransporter = () => {
  // For development, you can use a service like Mailtrap or configure with your email provider
  // Example for Gmail:
  return nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASS, // Use app-specific password
    },
  });
  
  // For production, you might want to use a service like SendGrid, Mailgun, etc.
  // return nodemailer.createTransport({
  //   host: process.env.SMTP_HOST,
  //   port: parseInt(process.env.SMTP_PORT || '587'),
  //   secure: false,
  //   auth: {
  //     user: process.env.SMTP_USER,
  //     pass: process.env.SMTP_PASS,
  //   },
  // });
};

const generateEmailContent = (data: EmailRequest): string => {
  const { destination, startDate, endDate, isLightPack, packingList, weatherData } = data;
  
  let content = `
    <!DOCTYPE html>
    <html>
    <head>
      <meta charset="utf-8">
      <title>Your PackWise Packing List</title>
      <style>
        body { font-family: Arial, sans-serif; line-height: 1.6; color: #333; }
        .header { background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; padding: 20px; text-align: center; }
        .container { max-width: 600px; margin: 0 auto; background: #fff; }
        .section { padding: 20px; border-bottom: 1px solid #eee; }
        .item { padding: 8px 0; border-bottom: 1px solid #f5f5f5; }
        .category { font-weight: bold; color: #667eea; margin-top: 15px; }
        .weather { background: #f8f9fa; padding: 15px; border-radius: 8px; margin: 15px 0; }
        .footer { background: #f8f9fa; padding: 20px; text-align: center; color: #666; }
        .checkbox { color: #28a745; }
        .ai-suggestion { background: #e3f2fd; padding: 5px; border-radius: 4px; }
      </style>
    </head>
    <body>
      <div class="container">
        <div class="header">
          <h1>‚úàÔ∏è PackWise - Your Smart Packing List</h1>
          <p>Destination: ${destination}</p>
  `;

  if (startDate && endDate) {
    const startStr = new Date(startDate).toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
    const endStr = new Date(endDate).toLocaleDateString('en-US', { 
      year: 'numeric', 
      month: 'long', 
      day: 'numeric' 
    });
    content += `<p>Dates: ${startStr} - ${endStr}</p>`;
  }

  content += `
          <p>Pack Mode: ${isLightPack ? 'Light Pack' : 'Full Pack'}</p>
        </div>
  `;

  // Weather information
  if (weatherData) {
    content += `
        <div class="section">
          <h2>üå§Ô∏è Weather Forecast</h2>
          <div class="weather">
            <p><strong>${weatherData.city}</strong></p>
            <p>${weatherData.summary}</p>
          </div>
        </div>
    `;
  }

  // Packing progress
  const packedCount = packingList.filter(item => item.isPacked).length;
  const totalCount = packingList.length;
  const progressPercentage = totalCount > 0 ? Math.round((packedCount / totalCount) * 100) : 0;

  content += `
        <div class="section">
          <h2>üìã Packing Progress</h2>
          <p>${packedCount} of ${totalCount} items packed (${progressPercentage}%)</p>
        </div>
  `;

  // Group items by category
  const groupedItems = packingList.reduce((groups, item) => {
    const category = item.category;
    if (!groups[category]) {
      groups[category] = [];
    }
    groups[category].push(item);
    return groups;
  }, {} as { [key: string]: PackingItem[] });

  content += `<div class="section">`;

  Object.keys(groupedItems).sort().forEach((category) => {
    const items = groupedItems[category];
    content += `<div class="category">${category} (${items.length})</div>`;
    
    items.forEach((item) => {
      const quantity = isLightPack ? item.quantity.light : item.quantity.full;
      const checkbox = item.isPacked ? '‚òë' : '‚òê';
      const itemText = `${checkbox} ${item.name}${quantity > 1 ? ` (${quantity})` : ''}`;
      
      if (item.isAISuggestion) {
        content += `<div class="item ai-suggestion">${itemText} ü§ñ AI Suggestion</div>`;
      } else {
        content += `<div class="item">${itemText}</div>`;
      }
    });
  });

  content += `
        </div>
        <div class="footer">
          <p>Generated by <strong>PackWise</strong> - Your Smart AI-Powered Packing Assistant</p>
          <p>Visit <a href="https://packwise.app">packwise.app</a> to create more smart packing lists!</p>
          <p>Generated on: ${new Date().toLocaleDateString('en-US', { 
            year: 'numeric', 
            month: 'long', 
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          })}</p>
        </div>
      </div>
    </body>
    </html>
  `;

  return content;
};

export async function POST(request: NextRequest) {
  try {
    const body: EmailRequest = await request.json();
    
    // Validate required fields
    if (!body.email || !body.destination || !body.packingList) {
      return NextResponse.json(
        { error: 'Missing required fields' },
        { status: 400 }
      );
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(body.email)) {
      return NextResponse.json(
        { error: 'Invalid email format' },
        { status: 400 }
      );
    }

    // Check if email service is configured
    if (!process.env.EMAIL_USER || !process.env.EMAIL_PASS) {
      return NextResponse.json(
        { error: 'Email service not configured' },
        { status: 500 }
      );
    }

    const transporter = createTransporter();
    
    // Generate email content
    const htmlContent = generateEmailContent(body);
    
    // Send email
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: body.email,
      subject: `Your PackWise Packing List for ${body.destination}`,
      html: htmlContent,
      text: `Your PackWise packing list for ${body.destination} is attached. Visit packwise.app for more features!`,
    };

    await transporter.sendMail(mailOptions);

    return NextResponse.json(
      { message: 'Email sent successfully' },
      { status: 200 }
    );

  } catch (error) {
    console.error('Email sending error:', error);
    return NextResponse.json(
      { error: 'Failed to send email' },
      { status: 500 }
    );
  }
} 